//construction du maillageif(testName == "UnifP1" || testName == "UnifP2"){	Th = square(largeurUnif,largeurUnif,[(x-0.5)*2,(y-0.5)*2]);}else{	Th=ThRef; //square(30,30,[(x-0.5)*2,(y-0.5)*2]);	for(i=0;i < nbIter;i++){		Th = adaptmesh(Th,				coef*metricxx,				coef*metricxy,				coef*metricyy,				IsMetric=1);		if(ShowMeshAdapt){plot(Th,wait=1);};	};};DataOutput << testName << " : " << Th.nt << " triangles. coef : " << coef << endl;plot(Th, wait=ShowMesh, ps = testName +"Mesh.eps");//if(testName == "UnifP1" || testName == "IsoP1" || testName == "P1L2" || testName = "P1H1" || testName == "P1H1Cond" || testName == "P1H1S"){//	elType = "P1";//}else{//	elType = "P2";//};if(elType == "P1"){	fAdaptP1 = f;	plot(fAdaptP1, wait=ShowFunc, ps = "Pictures/" + testName + "F" + string(nb) + ".eps");}else{	fAdaptP2 = f;	plot(fAdaptP2, wait=ShowFunc, ps = "Pictures/" + testName + "F" + string(nb) + ".eps");};if(Show3D && elType == "P1"){   savemesh(Th,"mm",[x,y,fAdaptP1*.5]); //  save mm.points and mm.faces file for medit   // build a mm.bb file 	{ ofstream file("mm.bb"); 	file << "2 1 1 "<< fAdaptP1[].n << " 2 \n";	for (j=0;j<fAdaptP1[].n ; j++)  	  file << fAdaptP1[][j] << endl;     }      // call ffmedit command 	    exec("ffmedit mm");    // clean files	exec("rm mm.bb mm.faces mm.points");	};	if(ComputeErrors){	ThFine = trunc(Th,1,split=CSplit);		fAdaptP1 = f;	fFineP1	 = f;	fTestP1	 = fAdaptP1;		fAdaptP2 = f;	fFineP2	 = f;	fTestP2	 = fAdaptP2;			AlgosTested  = AlgosTested+ " " + testName+ ", ";	StrCoef	= StrCoef+ " "+ string(coef)+" , ";	NbTriangles  = NbTriangles+ " "+string(Th.nt)+" ,  ";			erP2L2 = erP1L2+ " "+ string( int2d(ThFine)((fTestP1-fFineP1)^2) )+" ,  ";	erP1H1= erP1H1+ " "+ string( int2d(ThFine)((dx(fTestP1)-dx(fFineP1))^2+(dy(fTestP1)-dy(fFineP1))^2) ) + " ,  ";			erP2L2 = erP2L2+ " "+string( int2d(ThFine)((fTestP2-fFineP2)^2) )+ " , ";	erP2H1 = erP2H1+ " "+ string( int2d(ThFine)((dx(fTestP2)-dx(fFineP2))^2+(dy(fTestP2)-dy(fFineP2))^2) )+ " ,  ";};