func int CountTriangles(real coef){	Th = ThRef;	for(int i=0; i<nbIter; i++){		Th = adaptmesh(Th,				coef*metricxx,				coef*metricxy,				coef*metricyy,				IsMetric = 1);	};	DataOutput << "coef : "<< coef << ", nb triangles : " << Th.nt<< endl;	return Th.nt;};coefMax = 1;coefMin = 1;while(CountTriangles(coefMin)>triangleCountGoal){coefMin/=2;};while(CountTriangles(coefMax)<triangleCountGoal){coefMax*=2;};if(coefMin < 1){	coefMax = 2*coefMin;} else {	coefMin = coefMax/2;};		for(int i=0; i< nbIterDicho; i++){	coefMid = (coefMin+coefMax)/2;	if(CountTriangles(coefMid)>triangleCountGoal){		coefMax = coefMid;			} else {		coefMin = coefMid;			};};if(showFinalMesh){	fespace Vh(Th,P1);	Vh fTest = f;	plot(Th, wait = 1);	plot(fTest);};