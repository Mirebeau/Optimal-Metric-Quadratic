/*Le but de cette file est de vérifier que les métriques c++ sont exactes, en les confrontant sur qq exemplesaux métriques Mathematica*///importing the metric definitions.load "Metriques/P1L2H1"load "Metriques/P2H1"load "Metriques/P2L2"bool testP1L2 = false;bool testP1H1 = false;bool testP1H1Cond = false;bool testP2L2 = true;bool testP2H1 = false;real H1Cond=2.;/*Rappel homog si f-> lambda f, alors M-> (lambda)^(-1/tau) M.tau = 2/(m+1) pour L^2, 2/m pour H^1_0.*/if(testP1L2){	cout << endl << endl << "P1H1" << endl;	cout << "isotropy test" << endl;	cout << "P1L2 x^2+y^2" << endl;	cout << MetricP1L2xx(1,0,1) << endl;	cout << MetricP1L2xy(1,0,1) << endl;	cout << MetricP1L2yy(1,0,1) << endl;	cout << "P1L2 x^2-y^2" << endl;	cout << MetricP1L2xx(1,0,-1) << endl;	cout << MetricP1L2xy(1,0,-1) << endl;	cout << MetricP1L2yy(1,0,-1) << endl;		cout << "homogeneity test" << endl;	cout << MetricP1L2xx(2,0,2)/MetricP1L2xx(1,0,1) << endl;	cout << "expected : 2^(2/3)" << endl;		cout << "general test, positive det" << endl;	cout << "1.47 x^2+ 2*0.68 x y +2.83 y^2" << endl;	cout << MetricP1L2xx(1.47, 0.68, 2.83) << endl;	cout << MetricP1L2xy(1.47, 0.68, 2.83) << endl;	cout << MetricP1L2yy(1.47, 0.68, 2.83) << endl;	cout << "expected : 1.18, 0.54, 2.27"<< endl;		cout << "general test, negative det" << endl;	cout << "1.47 x^2+ 2*0.68 x y -2.83 y^2" << endl;	cout << MetricP1L2xx(1.47, 0.68, -2.83) << endl;	cout << MetricP1L2xy(1.47, 0.68, -2.83) << endl;	cout << MetricP1L2yy(1.47, 0.68, -2.83) << endl;	cout << "expected : 1.24, -0.158, 2.24"<< endl;};if(testP1H1){	cout << endl << endl << "P1H1" << endl;	cout << "isotropy test" << endl;	cout << "P1H1 x^2+y^2" << endl;	cout << MetricP1H1xx(1,0,1) << endl;	cout << MetricP1H1xy(1,0,1) << endl;	cout << MetricP1H1yy(1,0,1) << endl;	cout << "P1H1 x^2-y^2" << endl;	cout << MetricP1H1xx(1,0,-1) << endl;	cout << MetricP1H1xy(1,0,-1) << endl;	cout << MetricP1H1yy(1,0,-1) << endl;		cout << "homogeneity test" << endl;	cout << MetricP1H1xx(2,0,2)/MetricP1H1xx(1,0,1) << endl;	cout << "expected : 2" << endl;		cout << "general test, positive det" << endl;	cout << "1.47 x^2+ 2*0.68 x y +2.83 y^2" << endl;	cout << MetricP1H1xx(1.47, 0.68, 2.83) << endl;	cout << MetricP1H1xy(1.47, 0.68, 2.83) << endl;	cout << MetricP1H1yy(1.47, 0.68, 2.83) << endl;	cout << "expected : 1.36, 1.52, 4.40"<< endl;		cout << "general test, negative det" << endl;	cout << "1.47 x^2+ 2*0.68 x y -2.83 y^2" << endl;	cout << MetricP1H1xx(1.47, 0.68, -2.83) << endl;	cout << MetricP1H1xy(1.47, 0.68, -2.83) << endl;	cout << MetricP1H1yy(1.47, 0.68, -2.83) << endl;	cout << "expected : 1.22, -0.43, 3.94"<< endl;};if(testP1H1Cond){	cout << endl << endl << "P1H1" << endl;	cout << "isotropy test" << endl;	cout << "P1H1 x^2+y^2" << endl;	cout << MetricP1H1Condxx(1,0,1, H1Cond) << endl;	cout << MetricP1H1Condxy(1,0,1, H1Cond) << endl;	cout << MetricP1H1Condyy(1,0,1, H1Cond) << endl;	cout << "P1H1 x^2-y^2" << endl;	cout << MetricP1H1Condxx(1,0,-1, H1Cond) << endl;	cout << MetricP1H1Condxy(1,0,-1, H1Cond) << endl;	cout << MetricP1H1Condyy(1,0,-1, H1Cond) << endl;		cout << "homogeneity test" << endl;	cout << MetricP1H1Condxx(2,0,2, H1Cond)/MetricP1H1Condxx(1,0,1, H1Cond) << endl;	cout << "expected : 2" << endl;		cout << "general test, positive det" << endl;	cout << "1.47 x^2+ 2*0.68 x y +2.83 y^2" << endl;	cout << MetricP1H1Condxx(1.47, 0.68, 2.83, H1Cond) << endl;	cout << MetricP1H1Condxy(1.47, 0.68, 2.83, H1Cond) << endl;	cout << MetricP1H1Condyy(1.47, 0.68, 2.83, H1Cond) << endl;	cout << "expected : 1.36, 1.52, 4.40"<< endl;		cout << "general test, negative det" << endl;	cout << "1.47 x^2+ 2*0.68 x y -2.83 y^2" << endl;	cout << MetricP1H1Condxx(1.47, 0.68, -2.83, H1Cond) << endl;	cout << MetricP1H1Condxy(1.47, 0.68, -2.83, H1Cond) << endl;	cout << MetricP1H1Condyy(1.47, 0.68, -2.83, H1Cond) << endl;	cout << "expected : 1.22, -0.43, 3.94"<< endl;};if(testP2L2){	cout << endl << endl << "P2L2" << endl;	cout << "isotropy test" << endl;	cout << "P2L2 x^3+3 x y^2" << endl;	cout << MetricP2L2xx(1,0,1,0) << endl;	cout << MetricP2L2xy(1,0,1,0) << endl;	cout << MetricP2L2yy(1,0,1,0) << endl;	cout << "P2L2 x^2-3 x y^2" << endl;	cout << MetricP2L2xx(1,0,-1,0) << endl;	cout << MetricP2L2xy(1,0,-1,0) << endl;	cout << MetricP2L2yy(1,0,-1,0) << endl;		cout << "homogeneity test" << endl;	cout << MetricP2L2xx(2,0,2,0)/MetricP2L2xx(1,0,1,0) << endl;	cout << "expected : 2^(1/2)" << endl;		cout << "general test, negative disc" << endl;	cout << "1.47 x^3+ 3*0.68 x^2 y +3*2.83 x y^2 +0.45 y^3" << endl;	cout << MetricP2L2xx(1.47, 0.68, 2.83, 0.45) << endl;	cout << MetricP2L2xy(1.47, 0.68, 2.83, 0.45) << endl;	cout << MetricP2L2yy(1.47, 0.68, 2.83, 0.45) << endl;	cout << "expected : 1.30, 0.34, 2.60"<< endl;		cout << "general test, positive disc" << endl;	cout << "1.47 x^3 + 3*0.68 x^2 - 3*2.83 x + 0.45" << endl;	cout << MetricP2L2xx(1.47, 0.68, -2.83, 0.45) << endl;	cout << MetricP2L2xy(1.47, 0.68, -2.83, 0.45) << endl;	cout << MetricP2L2yy(1.47, 0.68, -2.83, 0.45) << endl;	cout << "expected : 1.23, -0.344, 2.05"<< endl;		cout << MetricP2L2xx(0.000001, 2., 0, 6) << endl;	cout << MetricP2L2xy(0.000001, 2., 0, 6) << endl;	cout << MetricP2L2yy(0.000001, 2., 0, 6) << endl;		cout << MetricP2L2xx(0.00598576, 2.01256, -0.163235, 13.4516) << endl;	cout << MetricP2L2xy(0.00598576, 2.01256, -0.163235, 13.4516) << endl;	cout << MetricP2L2yy(0.00598576, 2.01256, -0.163235, 13.4516) << endl;				//cout << "tous les tests passent, à une constante multiplicative près..."	//		<< "qui n'est pas la même à chaque fois" << endl;};if(testP2H1){	cout << endl << endl << "P2H1" << endl;	cout << "isotropy test" << endl;	cout << "P2H1 x^2+y^2" << endl;	cout << MetricP2H1xx(1,0,1,0) << endl;	cout << MetricP2H1xy(1,0,1,0) << endl;	cout << MetricP2H1yy(1,0,1,0) << endl;	cout << "P2H1 x^2-y^2" << endl;	cout << MetricP2H1xx(1,0,-1,0) << endl;	cout << MetricP2H1xy(1,0,-1,0) << endl;	cout << MetricP2H1yy(1,0,-1,0) << endl;		cout << "homogeneity test" << endl;	cout << MetricP2H1xx(2,0,2,0)/MetricP2H1xx(1,0,1,0) << endl;	cout << "expected : 2^(2/3)" << endl;		cout << "general test, neqgtive disc" << endl;	cout << "1.47 x^3+ 3*0.68 x^2 y +3*2.83 x y^2 +0.45 y^3" << endl;	cout << MetricP2H1xx(1.47, 0.68, 2.83, 0.45) << endl;	cout << MetricP2H1xy(1.47, 0.68, 2.83, 0.45) << endl;	cout << MetricP2H1yy(1.47, 0.68, 2.83, 0.45) << endl;	cout << "expected : 2.12, 0.559, 2.63"<< endl;		cout << "general test, positive disc" << endl;	cout << "1.47 x^3 + 3*0.68 x^2 - 3*2.83 x + 0.45" << endl;	cout << MetricP2H1xx(1.47, 0.68, -2.83, 0.45) << endl;	cout << MetricP2H1xy(1.47, 0.68, -2.83, 0.45) << endl;	cout << MetricP2H1yy(1.47, 0.68, -2.83, 0.45) << endl;	cout << "expected : 2.14, -0.367, 2.639"<< endl;};