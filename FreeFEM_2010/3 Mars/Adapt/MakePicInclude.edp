//***** variables to be chosen by the user****int nb = 500; //number of elementsbool DoUnifP1 = 	true;bool DoUnifP2 = 	true;bool DoIsoP1L2 = 	false;bool DoIsoP1H1 = 	true;bool DoIsoP2L2 = 	false;bool DoIsoP2H1 = 	true;bool DoP1L2 = 		false;bool DoP2L2 = 		false;bool DoP2L2Cond = 	false;bool DoP1H1 = 		true;bool DoP1H1Cond = 	false;bool DoP1H1S = 		true;bool DoP2H1 = 		true;bool DoP2H1Cond = 	false;bool DoP2H1S = 		true;bool DoP1New =		false;bool DoP1CondNew =	false;bool DoP2New = 		false;bool DoP2CondNew =	false;bool obtainCoefs = false; //deuxième utilisation du programme : obtenir les coefficientsint nbIterDicho = 8; //pour obtenir les coefficientsint nbIter = 3;bool ShowMesh = true;bool ShowFunc = true;bool Show3D = false;bool ShowMeshAdapt = false;bool ComputeErrors = true;real H1Cond = 100;real P2H1Cond = 100;real P2L2Cond = 100;//************* output ************string DataOutputFileName = obtainCoefs ? "Coefficients.txt" : "PicNumTriangles.txt";cout<<"P1 Interpolation error for quadratic functions"<<endl;cout<<"comments written to"<<DataOutputFileName<<endl;ofstream DataOutput(DataOutputFileName);//Will be written to output.string AlgosTested = "";string NbTriangles = "";string StrCoef = "";string erP1L2 = "";string erP1H1 = "";string erP2L2 = "";string erP2H1 = "";//****** Mesh and function definitions ******mesh Th = square(10,10,[(x-0.5)*2,(y-0.5)*2]);mesh ThFine = Th;mesh ThRef=square(30,30,[(x-0.5)*2,(y-0.5)*2]);fespace Uh(Th,P1);fespace UhFine(ThFine,P1);fespace Wh(Th,P2);fespace WhFine(ThFine,P2);Uh fAdaptP1;UhFine fFineP1, fTestP1;Wh fAdaptP2;WhFine fFineP2, fTestP2;string testName, elType;int i,j;int CSplit = 3;real coef;//***** Loading external information *****//how to compute the metricsload "Metriques/AllMetricsToFF"		//the coefficients to have the good number of elements in the triangulationinclude "MetriquesTestFreeFem/Coefficients.edp"		//The function and its derivativesinclude "MetriquesTestFreeFem/fTestHecht.edp"//****** The computations themselves *****//-------Uniform Triangulations-------if(DoUnifP1){	testName = "UnifP1"; elType = "P1"; 	include "MetriquesTestFreeFem/MetricId.edp"; //ignoré en pratique, juste pour avoir une def	include "MetriquesTestFreeFem/WorkExec.edp";};	if(DoUnifP2){	testName = "UnifP2"; elType = "P2"; 	include "MetriquesTestFreeFem/MetricId.edp"; //ignoré en pratique, juste pour avoir une def	include "MetriquesTestFreeFem/WorkExec.edp";};	//--------Adaptive Isotropic--------if(DoIsoP1L2){	testName = "IsoP1L2"; elType = "P1"; coef = coefIsoP1;	include "MetriquesTestFreeFem/MetricIsoP1.edp";	include "MetriquesTestFreeFem/WorkExec.edp";};if(DoIsoP1H1){	testName = "IsoP1H1"; elType = "P1"; coef = coefIsoP1H1;	include "MetriquesTestFreeFem/MetricIsoP1H1.edp";	include "MetriquesTestFreeFem/WorkExec.edp";};if(DoIsoP2L2){	testName = "IsoP2L2"; elType = "P2"; coef = coefIsoP2;	include "MetriquesTestFreeFem/MetricIsoP2.edp";	include "MetriquesTestFreeFem/WorkExec.edp";};if(DoIsoP2H1){	testName = "IsoP2H1"; elType = "P2"; coef = coefIsoP2H1;	include "MetriquesTestFreeFem/MetricIsoP2H1.edp";	include "MetriquesTestFreeFem/WorkExec.edp";};//--------Adaptive Anisotropic L2-------if(DoP1L2){	testName = "P1L2"; elType = "P1"; coef = coefP1L2;	include "MetriquesTestFreeFem/MetricP1L2.edp";	include "MetriquesTestFreeFem/WorkExec.edp";};if(DoP2L2){	testName = "P2L2"; elType = "P2"; coef = coefP2L2;	include "MetriquesTestFreeFem/MetricP2L2.edp";	include "MetriquesTestFreeFem/WorkExec.edp";};if(DoP2L2Cond){	testName = "P2L2Cond"; elType = "P2"; coef = coefP2L2Cond;	include "MetriquesTestFreeFem/MetricP2L2Cond.edp";	include "MetriquesTestFreeFem/WorkExec.edp";};//-------Adaptive Anisotropic H1---------if(DoP1H1){	testName = "P1H1"; elType = "P1"; coef = coefP1H1;	include "MetriquesTestFreeFem/MetricP1H1.edp";	include "MetriquesTestFreeFem/WorkExec.edp";};if(DoP1H1Cond){	testName = "P1H1Cond"; elType = "P1"; coef = coefP1H1Cond;	include "MetriquesTestFreeFem/MetricP1H1Cond.edp";	include "MetriquesTestFreeFem/WorkExec.edp";};if(DoP1H1S){	testName = "P1H1S"; elType = "P1"; coef = coefP1H1S;	include "MetriquesTestFreeFem/MetricP1H1S.edp";	include "MetriquesTestFreeFem/WorkExec.edp";	};if(DoP2H1){	testName = "P2H1"; elType = "P2"; coef = coefP2H1;	include "MetriquesTestFreeFem/MetricP2H1.edp";	include "MetriquesTestFreeFem/WorkExec.edp";};if(DoP2H1Cond){	testName = "P2H1Cond"; elType = "P2"; coef = coefP2H1Cond;	include "MetriquesTestFreeFem/MetricP2H1Cond.edp";	include "MetriquesTestFreeFem/WorkExec.edp";};if(DoP2H1S){	testName = "P2H1S"; elType = "P2"; coef = coefP2H1S;	include "MetriquesTestFreeFem/MetricP2H1S.edp";	include "MetriquesTestFreeFem/WorkExec.edp";	};if(obtainCoefs){	DataOutput << endl << "Target Number of triangles : " << nb << endl;}else{	DataOutput << "AlgosTested = { " << AlgosTested <<  " };" << endl;	DataOutput << "NbTriangles = {" << NbTriangles << "};"<< endl;	DataOutput << "coef = {" << StrCoef << "};"<< endl;	DataOutput << "erP1L2 = {" << erP1L2 << "};"<< endl;	DataOutput << "erP1H1 = {" << erP1H1 << "};"<< endl;	DataOutput << "erP2L2 = {" << erP2L2 << "};"<< endl;	DataOutput << "erP2H1 = {" << erP2H1 << "};"<< endl;};