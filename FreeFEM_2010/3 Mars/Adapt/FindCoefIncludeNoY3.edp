/*Le but de ce programme est de trouver le coefficient multiplicatif à mettre devant la métrique pour avoir un nombre donné de triangles.*/string DataOutputFileName = "FindCoef.txt";ofstream DataOutput(DataOutputFileName);load "Metriques/AllMetricsToFF"				real c=10;real c2 = 10;func f = y^3/c2+x^2*y + tanh(c*(-2*x + sin(5*y)));func real sech(real X){return 2./(exp(X)+exp(-X));};func fxx = 2*(y - 4*c^2*sech(c*(-2*x + sin(5*y)))^2*tanh(c*(-2*x + sin(5*y))));func fxy = 2*(x + 10*c^2*cos(5*y)*sech(c*(-2*x + sin(5*y)))^2*tanh(c*(-2*x + sin(5*y))));func fyy =  6*y/c2- 25*c*sech(c*(-2*x + sin(5*y)))^2*(sin(5*y) + 2*c*cos(5*y)^2*tanh(c*(-2*x + sin(5*y))));func normd2f = sqrt(fxx^2+2*fxy^2+fyy^2);func fxxx = -16*c^3*(-2 + cosh(2*c*(-2*x + sin(5*y))))*sech(c*(-2*x + sin(5*y)))^4;func fxxy = 2 - 40*c^3*cos(5*y)*sech(c*(-2*x + sin(5*y)))^4 + 80*c^3*cos(5*y)*sech(c*(-2*x + sin(5*y)))^2*tanh(c*(-2*x + sin(5*y)))^2;func fxyy = 100*c^2*sech(c*(-2*x + sin(5*y)))^2*(c*cos(5*y)^2*sech(c*(-2*x + sin(5*y)))^2 - tanh(c*(-2*x + sin(5*y)))*(sin(5*y) + 2*c*cos(5*y)^2*tanh(c*(-2*x + sin(5*y)))));func fyyy = 6/c2 - 250*c^3*cos(5*y)^3*sech(c*(-2*x + sin(5*y)))^4 + 125*c*sech(c*(-2*x + sin(5*y)))^2*(-cos(5*y) + 3*c*sin(10*y)*tanh(c*(-2*x + sin(5*y))) + 4*c^2*cos(5*y)^3*tanh(c*(-2*x + sin(5*y)))^2);func normd3f = sqrt(fxxx^2+3*fxxy^2+3*fxyy^2+fyyy^2);/********************** Choix de la métrique ********************/bool DoUnif = false;bool DoIsoP1 = false;bool DoP1L2 = false;bool DoP1H1 = false;bool DoP1H1Cond = false;bool DoP2L2 = true;bool DoP2L2Cond = false;bool DoP2H1 = false;real H1Cond = 100;real P2L2Cond = 500;bool showFinalMesh = false;/*************************** Fin du choix de la métrique *****************************/int nbIter = 3;int nbIterDicho = 10;real triangleCountGoal = 2000;real coefMid;bool DoIt;real coefMin =1;real coefMax =1;DataOutput << "nbIter = " << nbIter << endl;DataOutput << "nbIterDicho = " << nbIterDicho << endl;DataOutput << "triangleCountGoal = " << triangleCountGoal << endl;mesh ThRef = square(sqrt(triangleCountGoal), sqrt(triangleCountGoal),[(x-0.5)*2,(y-0.5)*2]);mesh Th;if(DoIsoP1){	DataOutput << "IsoP1" << endl;	include "MetriquesTestFreeFem/MetricIsoP1.edp";	include "MetriquesTestFreeFem/MetricExec.edp";};if(DoP1L2){	DataOutput << "P1L2" << endl;	include "MetriquesTestFreeFem/MetricP1L2.edp";	include "MetriquesTestFreeFem/MetricExec.edp";};if(DoP1H1){	DataOutput << "P1H1" << endl;	include "MetriquesTestFreeFem/MetricP1H1.edp";	include "MetriquesTestFreeFem/MetricExec.edp";};if(DoP1H1Cond){	DataOutput << "P1H1Cond, maxCond = " << H1Cond << endl;	include "MetriquesTestFreeFem/MetricP1H1Cond.edp";	include "MetriquesTestFreeFem/MetricExec.edp";};if(DoP2L2){	DataOutput << "P2L2" << endl;	include "MetriquesTestFreeFem/MetricP2L2.edp";	include "MetriquesTestFreeFem/MetricExec.edp";};if(DoP2L2Cond){	DataOutput << "P2L2Cond, maxCond = " << P2L2Cond << endl;	include "MetriquesTestFreeFem/MetricP2L2Cond.edp";	include "MetriquesTestFreeFem/MetricExec.edp";};if(DoP2H1){	DataOutput << "P2H1" << endl;	include "MetriquesTestFreeFem/MetricP2H1.edp";	include "MetriquesTestFreeFem/MetricExec.edp";};